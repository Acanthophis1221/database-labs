Server [localhost]: psql -h localhost -p 5432 -U postgres -d mydb
Database [postgres]: psql -h localhost -p 5432 -U postgres -d mydb
Port [5432]: psql -h localhost -p 5432 -U postgres -d mydb
Username [postgres]: psql -h localhost -p 5432 -U postgres -d mydb
Password for user postgres:

psql (17.6)
WARNING: Console code page (866) differs from Windows code page (1251)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

mydb=# CREATE TABLE departments (
mydb(# dept_id SERIAL PRIMARY KEY,
mydb(# dept_name VARCHAR(100) NOT NULL, location VARCHAR(100)
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR (50) NOT NULL,
mydb(# last_name VARCHAR (50) NOT NULL,
mydb(# dept_id INTEGER REFERENCES departments (dept_id)
mydb(# );
CREATE TABLE
mydb=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner
--------+-------------+-------+----------
 public | departments | table | postgres
 public | employees   | table | postgres
(2 rows)


mydb=# DROP TABLE employees;
DROP TABLE
mydb=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner
--------+-------------+-------+----------
 public | departments | table | postgres
(1 row)


mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY, first_name VARCHAR (50) NOT NULL,
mydb(# last_name VARCHAR(50) NOT NULL,
mydb(# dept_id INTEGER,
mydb(# FOREIGN KEY (dept_id) REFERENCES departments (dept_id)
mydb(# );
CREATE TABLE
mydb=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner
--------+-------------+-------+----------
 public | departments | table | postgres
 public | employees   | table | postgres
(2 rows)


mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees;
ОШИБКА:  ошибка синтаксиса (примерное положение: ";")
LINE 1: CREATE TABLE employees;
                              ^
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER,
mydb(# CONSTRAINT fk_employee_department
mydb(# FOREIGN KEY (dept_id) REFERENCES departments (dept_id));
CREATE TABLE
mydb=# INSERT INTO departments (dept_name, location) VALUES ('Engineering', 'Building A'),
mydb-# ('Marketing', 'Building B'),
mydb-# ('HR', 'Building C');
INSERT 0 3
mydb=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
INSERT 0 1
mydb=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
mydb-# ('Jane', 'Doe', 99);
ОШИБКА:  INSERT или UPDATE в таблице "employees" нарушает ограничение внешнего ключа "fk_employee_department"
DETAIL:  Ключ (dept_id)=(99) отсутствует в таблице "departments".
mydb=# DELETE FROM departments WHERE dept_id = 1;
ОШИБКА:  UPDATE или DELETE в таблице "departments" нарушает ограничение внешнего ключа "fk_employee_department" таблицы "employees"
DETAIL:  На ключ (dept_id)=(1) всё ещё есть ссылки в таблице "employees".
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner
--------+-------------+-------+----------
 public | departments | table | postgres
(1 row)


mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY, first_name VARCHAR (50) NOT NULL,
mydb(# last_name VARCHAR (50) NOT NULL,
mydb(# dept_id INTEGER REFERENCES departments (dept_id) ON DELETE CASCADE);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1
mydb=# \с employees
invalid command \б
Try \? for help.
mydb=# \d employees
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null |  last_name  | character varying(50) |           | not null |  dept_id    | integer               |           |          | Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "employees_dept_id_fkey" FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE CASCADE


mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR (50) NOT NULL,
mydb(# last_name VARCHAR (50) NOT NULL,
mydb(# dept_id INTEGER REFERENCES departments (dept_id) ON DELETE SET NULL);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR (50) NOT NULL,
mydb(# last_name VARCHAR (50) NOT NULL,
mydb(# dept_id INTEGER DEFAULT
mydb(# REFERENCES departments (dept_id) ON DELETE SET DEFAULT);
ОШИБКА:  ошибка синтаксиса (примерное положение: "REFERENCES")
LINE 6: REFERENCES departments (dept_id) ON DELETE SET DEFAULT);
        ^
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR (50) NOT NULL,
mydb(# last_name VARCHAR (50) NOT NULL,
mydb(# dept_id INTEGER DEFAULT 0 REFERENCES departments (dept_id) ON DELETE SET DEFAULT);
CREATE TABLE
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR(50) NOT NULL,
mydb(# last_name VARCHAR (50) NOT NULL,
mydb(# dept_id INTEGER REFERENCES departments (dept_id) ON DELETE RESTRICT);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(#     emp_id SERIAL PRIMARY KEY,
mydb(#     first_name VARCHAR(50) NOT NULL,
mydb(#     last_name VARCHAR(50) NOT NULL,
mydb(#     dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
mydb(# );
CREATE TABLE
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(#     emp_id SERIAL PRIMARY KEY,
mydb(#     first_name VARCHAR(50) NOT NULL,
mydb(#     last_name VARCHAR(50) NOT NULL,
mydb(#     dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
mydb(# );
CREATE TABLE
mydb=# UPDATE departments SET dept_id = 100 WHERE dept_id = 1;
UPDATE 0
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(#     emp_id SERIAL PRIMARY KEY,
mydb(#     first_name VARCHAR(50) NOT NULL,
mydb(#     last_name VARCHAR(50) NOT NULL,
mydb(#     dept_id INTEGER REFERENCES departments(dept_id)
mydb(#         ON DELETE CASCADE
mydb(#         ON UPDATE CASCADE
mydb(# );
CREATE TABLE
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE users (
mydb(#     user_id SERIAL PRIMARY KEY,
mydb(#     username VARCHAR(50) UNIQUE NOT NULL,
mydb(#     email VARCHAR(100) UNIQUE NOT NULL,
mydb(#     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE user_profiles (
mydb(#     profile_id SERIAL PRIMARY KEY,
mydb(#     user_id INTEGER UNIQUE NOT NULL,
mydb(# first_name VARCHAR(50),
mydb(#     last_name VARCHAR(50),
mydb(#     bio TEXT,
mydb(#     profile_picture_url VARCHAR(255),
mydb(#     FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
mydb(# );
CREATE TABLE
mydb=# DROP TABLE user_profiles;
DROP TABLE
mydb=# CREATE TABLE user_profiles (
mydb(#     user_id INTEGER PRIMARY KEY,
mydb(#     first_name VARCHAR(50),
mydb(#     last_name VARCHAR(50),
mydb(#     bio TEXT,
mydb(#     profile_picture_url VARCHAR(255),
mydb(#     FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
mydb(# );
CREATE TABLE
mydb=# INSERT INTO users (username, email) VALUES
mydb-# ('johndoe', 'john@example.com');
INSERT 0 1
mydb=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
mydb-# (1, 'John', 'Doe', 'Software developer passionate about databases');
INSERT 0 1
mydb=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES
mydb-# (1, 'Jane', 'Smith');
ОШИБКА:  повторяющееся значение ключа нарушает ограничение уникальности "user_profiles_pkey"
DETAIL:  Ключ "(user_id)=(1)" уже существует.
mydb=# \ве
invalid command \ў?
Try \? for help.
mydb=# \dt
             List of relations
 Schema |     Name      | Type  |  Owner
--------+---------------+-------+----------
 public | departments   | table | postgres
 public | user_profiles | table | postgres
 public | users         | table | postgres
(3 rows)


mydb=# DROP TABLE departments;
DROP TABLE
mydb=# CREATE TABLE departments (
mydb(#     dept_id SERIAL PRIMARY KEY,
mydb(#     dept_name VARCHAR(100) NOT NULL,
mydb(#     manager_name VARCHAR(100),
mydb(#     budget DECIMAL(10,2)
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE employees (
mydb(#     emp_id SERIAL PRIMARY KEY,
mydb(#     first_name VARCHAR(50) NOT NULL,
mydb(#     last_name VARCHAR(50) NOT NULL,
mydb(#     position VARCHAR(100),
mydb(#     salary DECIMAL(10,2),
mydb(#     hire_date DATE DEFAULT CURRENT_DATE,
mydb(#     dept_id INTEGER NOT NULL,  -- Foreign key
mydb(#     FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE blog_posts (
mydb(#     post_id SERIAL PRIMARY KEY,
mydb(#     title VARCHAR(200) NOT NULL,
mydb(#     content TEXT,
mydb(#     author VARCHAR(100),
mydb(#     published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE comments (
mydb(#     comment_id SERIAL PRIMARY KEY,
mydb(#     post_id INTEGER NOT NULL,  -- Foreign key
mydb(#     commenter_name VARCHAR(100),
mydb(#     comment_text TEXT NOT NULL,
mydb(#     comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
mydb(#     FOREIGN KEY (post_id) REFERENCES blog_posts(post_id) ON DELETE CASCADE
mydb(# );
CREATE TABLE
mydb=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
mydb-# ('Engineering', 'Alice Johnson', 500000.00),
mydb-# ('Marketing', 'Bob Wilson', 200000.00);
INSERT 0 2
mydb=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
mydb-# ('John', 'Smith', 'Software Engineer', 75000.00, 1),
mydb-# ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
mydb-# ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
mydb-# ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);
INSERT 0 4
mydb=# SELECT d.dept_name, e.first_name, e.last_name, e.position
mydb-# FROM departments d
mydb-# JOIN employees e ON d.dept_id = e.dept_id
mydb-# ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)


mydb=# CREATE TABLE students (
mydb(#     student_id SERIAL PRIMARY KEY,
mydb(#     first_name VARCHAR(50) NOT NULL,
mydb(#     last_name VARCHAR(50) NOT NULL,
mydb(#     email VARCHAR(100) UNIQUE,
mydb(#     enrollment_date DATE DEFAULT CURRENT_DATE
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE courses (
mydb(#     course_id SERIAL PRIMARY KEY,
mydb(#     course_code VARCHAR(10) UNIQUE NOT NULL,
mydb(#     course_name VARCHAR(100) NOT NULL,
mydb(#     credits INTEGER NOT NULL,
mydb(#     instructor VARCHAR(100)
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE student_enrollments (
mydb(#     enrollment_id SERIAL PRIMARY KEY,
mydb(#     student_id INTEGER NOT NULL,
mydb(#     course_id INTEGER NOT NULL,
mydb(#     enrollment_date DATE DEFAULT CURRENT_DATE,
mydb(#     grade CHAR(2),
mydb(#     FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
mydb(#     FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
mydb(#     UNIQUE(student_id, course_id)
mydb(# );
CREATE TABLE
mydb=# INSERT INTO students (first_name, last_name, email) VALUES
mydb-# ('Alice', 'Johnson', 'alice@university.edu'),
mydb-# ('Bob', 'Smith', 'bob@university.edu'),
mydb-# ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
mydb=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
mydb-# ('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
mydb-# ('CS201', 'Data Structures', 4, 'Dr. Davis'),
mydb-# ('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 3
mydb=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
mydb-# (1, 1, 'A'), (1, 2, 'B+'), (2, 1, 'A-'), (2, 3, 'B'), (3, 2, 'A'), (3, 3, 'A-');
INSERT 0 6
mydb=# SELECT
mydb-#     s.first_name || ' ' || s.last_name AS student_name,
mydb-#     c.course_code,
mydb-#     c.course_name,
mydb-#     se.grade,
mydb-#     se.enrollment_date
mydb-# FROM students s
mydb-# JOIN student_enrollments se ON s.student_id = se.student_id
mydb-# JOIN courses c ON se.course_id = c.course_id
mydb-# ORDER BY s.last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-10-16
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-10-16
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-10-16
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-10-16
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-10-16
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-10-16
(6 rows)


mydb=# SELECT
mydb-#     s.first_name,
mydb-#     s.last_name,
mydb-#     se.grade
mydb-# FROM students s
mydb-# JOIN student_enrollments se ON s.student_id = se.student_id
mydb-# JOIN courses c ON se.course_id = c.course_id
mydb-# WHERE c.course_code = 'CS101';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Bob        | Smith     | A-
(2 rows)


mydb=# SELECT
mydb-#     c.course_code,
mydb-#     c.course_name,
mydb-#     c.credits,
mydb-#     se.grade
mydb-# FROM courses c
mydb-# JOIN student_enrollments se ON c.course_id = se.course_id
mydb-# JOIN students s ON se.student_id = s.student_id
mydb-# WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A
 CS201       | Data Structures             |       4 | B+
(2 rows)


mydb=# /dt
mydb-# ;
ОШИБКА:  ошибка синтаксиса (примерное положение: "/")
LINE 1: /dt
        ^
mydb=# \dt
                List of relations
 Schema |        Name         | Type  |  Owner
--------+---------------------+-------+----------
 public | blog_posts          | table | postgres
 public | comments            | table | postgres
 public | courses             | table | postgres
 public | departments         | table | postgres
 public | employees           | table | postgres
 public | student_enrollments | table | postgres
 public | students            | table | postgres
 public | user_profiles       | table | postgres
 public | users               | table | postgres
(9 rows)


mydb=# DROP TABLE IF EXISTS
mydb-#     comments,
mydb-#     blog_posts,
mydb-#     employees,
mydb-#     departments,
mydb-#     student_enrollments,
mydb-#     students,
mydb-#     courses,
mydb-#     user_profiles,
mydb-#     users
mydb-# CASCADE;
DROP TABLE
mydb=# \dt
Did not find any relations.
mydb=# \q
